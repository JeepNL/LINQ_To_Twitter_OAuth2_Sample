@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private L2TBase l2tBase = new();

    protected override async Task OnInitializedAsync()
    {
        l2tBase = await localStorage.GetItemAsync<L2TBase>("l2t_base");

        if (l2tBase is not null && (!string.IsNullOrEmpty(l2tBase.AccessToken) && !string.IsNullOrEmpty(l2tBase.RefreshToken)))
        {
            await Http.PostAsJsonAsync("OAuth2/InitSession", l2tBase);

            //HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/UserInfo", l2tBase);
            //L2TBase userInfo = await responseMessage.Content.ReadFromJsonAsync<L2TBase>();
            //l2tBase.UserId = userInfo.UserId;
            //l2tBase.ScreenName = userInfo.ScreenName;
            //l2tBase.Name = userInfo.Name;
            //await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase);
        }
        else if (l2tBase is null)
            await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase = new());
    }
}

@*@code {
    private L2TBase l2tBase;

    protected override async Task OnInitializedAsync()
    {
    l2tBase = await localStorage.GetItemAsync<L2TBase>("l2t_base");

    if (l2tBase is not null)
    {
    var status = await Http.PostAsJsonAsync("OAuth2/InitSession", l2tBase);
    Console.WriteLine($"***** status: {status}");

    //HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/RefreshToken", l2tTokens);
    //L2TRefreshResponse refreshResponse = await responseMessage.Content.ReadFromJsonAsync<L2TRefreshResponse>();
    //l2tTokens.AccessToken = refreshResponse.access_token;
    //l2tTokens.RefreshToken = refreshResponse.refresh_token;
    //l2tTokens.ExpireTokenTicks = DateTime.UtcNow.AddSeconds(refreshResponse.expires_in).Ticks;
    //await localStorage.SetItemAsync<L2TBase>("l2t_tokens", l2tTokens);
    }
    else
    await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase = new());
    }
    }*@

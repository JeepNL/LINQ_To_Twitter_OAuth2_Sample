@page "/"
@using System.Text.RegularExpressions
@implements IDisposable
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavMan
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<h1>Blazor WASM L2T OAuth 2.0</h1>

@if (l2tBase.UserId == 0)
{
    <div class="mt-2">
        <button class="btn btn-primary" @onclick=TwitterOAuth2>Twitter OAuth2</button>
    </div>
}
else
{
    <EditForm Model="@l2tTweet" OnValidSubmit="@PostTweet">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="col-6 mt-2">
            <small class="text-muted">Put that on your plate!</small>
        </div>
        <div class="row align-items-center">
            <div class="col-6">
                <InputTextAreaCount id="textarea" class="form-control" @bind-Value=l2tTweet.Text />
            </div>
            <div class="col-2">
                <button type="submit" class="btn btn-sm btn-primary">Tweet</button>
            </div>
        </div>
        <div class="row">
            <div class="col-5">
                <small class="text-muted">Token expires in: @tokenExpiresInMin</small>
            </div>
            <div class="col-1 text-end">
                <small class="text-muted">@(280 - l2tTweet.Text.Length)</small>
            </div>
        </div>
    </EditForm>

    <div class="mt-2">
        @if (l2tTweet.TweetId > 0) // success
        {
            <small class="text-success">Last Tweet ID: @l2tTweet.TweetId</small>
        }
        else if (l2tTweet.TweetId == -1) // error
        {
            <small class="text-danger">Tweet Error: @l2tTweet.ErrorMessage</small>
        }
    </div>

    <div class="mt-2">
        <button @onclick="RevokeToken" class="btn btn-sm btn-primary">Revoke Token</button>
    </div>

    <div class="mt-2">
        <h2>Your Tweets</h2>
        @foreach (var tweet in l2tTimeline)
        {
            <div class="card text-dark bg-light mb-3" style="max-width: 800px;">
                <div class="row g-0">
                    <div class="col-md-1">
                        &nbsp;&nbsp;<img src="@tweet.ProfileImageUrl" class="mt-2 img-fluid rounded-start">
                    </div>
                    <div class="col-md-11">
                        <div class="card-header py-0">@tweet.Name (@@@tweet.ScreenName)</div>
                        <div class="card-body py-2">
                            <p class="card-text py-0">@((MarkupString)TweetParser(tweet.Text))</p>
                        </div>
                        <div class="card-footer pl-4 py-0">
                            <small class="text-muted">@tweet.TweetDate?.ToLocalTime() - Via: @tweet.Source</small>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private Timer _timer;
    private L2TBase l2tBase = new();
    private L2TTweet l2tTweet = new();
    private L2TTimelineRequest l2TTimelineRequest = new();
    private List<L2TTimelineResponse> l2tTimeline = new();
    private string tweetText = string.Empty;
    private string tokenExpiresInMin = string.Empty;
    private long lastId = 0;
    private Regex regexAt;
    private Regex regexHash;
    private Regex regexUrl;
    private bool auth = false;

    protected override async Task OnInitializedAsync()
    {
        //RegEx Init
        regexAt = new Regex(@"(?<=^|(?<=[^a-zA-Z0-9-_\\.]))@([A-Za-z_]+[A-Za-z0-9_]+)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
        regexHash = new Regex(@"(?<=^|(?<=[^a-zA-Z0-9\\.]))#([A-Za-z]+[A-Za-z0-9]+)", RegexOptions.IgnoreCase | RegexOptions.Compiled);
        regexUrl = new Regex(@"", RegexOptions.IgnoreCase | RegexOptions.Compiled);

        l2tBase = await localStorage.GetItemAsync<L2TBase>("l2t_base");
        if (l2tBase is not null && !string.IsNullOrEmpty(l2tBase.AccessToken) && !string.IsNullOrEmpty(l2tBase.RefreshToken))
        {
            StartTimer();
            auth = true;
        }
        else
            await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase = new());
    }

    protected override async Task OnParametersSetAsync()
    {
        if (auth)
            await UserTimeline();
    }

    private async Task PostTweet()
    {
        l2tTweet.AccessToken = l2tBase.AccessToken;
        l2tTweet.RefreshToken = l2tBase.RefreshToken;

        HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/PostTweet", l2tTweet);
        l2tTweet = await responseMessage.Content.ReadFromJsonAsync<L2TTweet>(); // l2tTweet is never null

        if (responseMessage.IsSuccessStatusCode)
        {
            l2tTweet.Text = string.Empty;
            l2tTweet.ErrorMessage = string.Empty;
        }
    }

    private async Task UserTimeline()
    {
        l2TTimelineRequest.AccessToken = l2tBase.AccessToken;
        l2TTimelineRequest.RefreshToken = l2tBase.RefreshToken;
        l2TTimelineRequest.ForUserId = l2tBase.UserId;
        l2TTimelineRequest.ForScreenName = ""; // #TODO
        l2TTimelineRequest.Filter = ""; // #TODO
        l2TTimelineRequest.SinceId = lastId;

        HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/UserTimeline", l2TTimelineRequest);

        if (responseMessage.IsSuccessStatusCode)
        {
            l2tTimeline = await responseMessage.Content.ReadFromJsonAsync<List<L2TTimelineResponse>>();
        }
    }

    private void TwitterOAuth2()
    {
        // 'true' as a second parameter (optional, default = false) means the page will refresh, like a F5.
        // "/OAuth2/Begin" is the route to the OAuth2 controller on the server which redirects the user to
        // the Twitter authorization page. After that the server controller redirects to
        // "/Pages/Callback.razor" (/l2tcallback) on the client which will load the Blazor WASM site again.
        NavMan.NavigateTo("/OAuth2/Begin", true);
    }

    // updates tokenExpiresInMin every minute
    public void StartTimer()
    {
        _timer = new Timer(async _ =>
        {
            long ticksLeft = l2tBase.ExpireTokenTicks - DateTime.UtcNow.Ticks;
            TimeSpan expires = new TimeSpan(ticksLeft);

            if (expires.TotalMinutes < 5)
                await RefreshToken();
            else
                tokenExpiresInMin = expires.TotalMinutes.ToString(format: "N0") + " minutes.";

            await InvokeAsync(StateHasChanged);
        }, null, 0, 1000 * 60); // 1000ms * 60 = 1 minute
    }

    public async Task RefreshToken()
    {
        HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/RefreshToken", l2tBase);
        L2TRefreshResponse refreshResponse = await responseMessage.Content.ReadFromJsonAsync<L2TRefreshResponse>();

        l2tBase.AccessToken = refreshResponse.access_token;
        l2tBase.RefreshToken = refreshResponse.refresh_token;
        l2tBase.ExpireTokenTicks = DateTime.UtcNow.AddSeconds(refreshResponse.expires_in).Ticks;

        await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase);

        tokenExpiresInMin = "Token Refreshed";
    }

    public async Task RevokeToken()
    {
        await Http.PostAsJsonAsync("OAuth2/RevokeToken", l2tBase);
        //HttpResponseMessage responseMessage = await Http.PostAsJsonAsync("OAuth2/RevokeToken", l2tBase);
        //status = responseMessage.Content.ToString();

        l2tBase.UserId = 0;
        l2tBase.AccessToken = string.Empty;
        l2tBase.RefreshToken = string.Empty;
        l2tBase.ExpireTokenTicks = 0;

        await localStorage.SetItemAsync<L2TBase>("l2t_base", l2tBase);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    // utilities

    public string TweetParser(string s) // #TODO #INPROGRESS
    {
        //Console.WriteLine($"1: {s}");

        //@ and #
        s = regexAt.Replace(s, @"<a href=""https://twitter.com/$0"" target=""_blank"">$0</a>");
        s = regexHash.Replace(s, @$"<a href=""https://twitter.com/search?q=$0"" target=""_blank"">$0</a>");

        // https://twitter.com/search?q=%23hash
        // https://twitter.com/hashtag/Test2
        s = s.Replace("?q=#", "?q=%23");
        return s;
    }

    //Console.WriteLine($": {}");
}
